`timescale 1ns/10ps

//code for the alu

module ALU(


//ports

  input clk, clr,
  input wire [31:0] A_Register,
  input wire [31:0] B_Register,
  //for operator, can't be 4 bits because there could be
  //more than 16 functions
  input wire [4:0] opcode,
  output wire [31:0] result,
  //output is 64 bits to allow for a wider variety of operations
  output reg [63:0] C_Register
  

);

//Define operations

localparam ALU_OP_AND = 
localparam ALU_OP_OR = 



//Choose operation based on 'op' input

always@(*) begin
	//setting result to 0 by default, and the 0 flag to 0 by default
	result = 32'b0;
	zero_flag = 1'b0;

	case(op)
		ALU_OPP_AND: result = a & b;
		ALU_OPP_OR: result = a | b;
		default: result = 32'b0;
		
	endcase
	
	
	//If the output is 0, set the 0 flag to 1. this 
	//information can be used by other parts of the system to make decisions,
	//such as whether to take a certain branch in a program or not,
	//based on the outcome of the ALU
	if (result == 32'b0) zero_flag = 1'b1;
	
end

//Update zero flag based on result?

endmodule
		

